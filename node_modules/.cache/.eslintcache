[{"/Users/daryamakauchyk/Desktop/algososh/src/index.tsx":"1","/Users/daryamakauchyk/Desktop/algososh/src/reportWebVitals.ts":"2","/Users/daryamakauchyk/Desktop/algososh/src/components/app/app.tsx":"3","/Users/daryamakauchyk/Desktop/algososh/src/components/queue-page/queue-page.tsx":"4","/Users/daryamakauchyk/Desktop/algososh/src/components/list-page/list-page.tsx":"5","/Users/daryamakauchyk/Desktop/algososh/src/components/fibonacci-page/fibonacci-page.tsx":"6","/Users/daryamakauchyk/Desktop/algososh/src/components/main-page/main-page.tsx":"7","/Users/daryamakauchyk/Desktop/algososh/src/components/string/string.tsx":"8","/Users/daryamakauchyk/Desktop/algososh/src/components/sorting-page/sorting-page.tsx":"9","/Users/daryamakauchyk/Desktop/algososh/src/components/stack-page/stack-page.tsx":"10","/Users/daryamakauchyk/Desktop/algososh/src/components/ui/solution-layout/solution-layout.tsx":"11","/Users/daryamakauchyk/Desktop/algososh/src/components/ui/return-button/return-button.tsx":"12","/Users/daryamakauchyk/Desktop/algososh/src/components/ui/icons/return-icon.tsx":"13","/Users/daryamakauchyk/Desktop/algososh/src/components/ui/input/input.tsx":"14","/Users/daryamakauchyk/Desktop/algososh/src/components/ui/button/button.tsx":"15","/Users/daryamakauchyk/Desktop/algososh/src/types/direction.ts":"16","/Users/daryamakauchyk/Desktop/algososh/src/components/ui/icons/descending-icon.tsx":"17","/Users/daryamakauchyk/Desktop/algososh/src/components/ui/icons/ascending-icon.tsx":"18","/Users/daryamakauchyk/Desktop/algososh/src/components/ui/circle/circle.tsx":"19","/Users/daryamakauchyk/Desktop/algososh/src/types/element-states.ts":"20","/Users/daryamakauchyk/Desktop/algososh/src/components/ui/column/column.tsx":"21","/Users/daryamakauchyk/Desktop/algososh/src/components/ui/radio-input/radio-input.tsx":"22","/Users/daryamakauchyk/Desktop/algososh/src/components/ui/icons/arrow-icon.tsx":"23","/Users/daryamakauchyk/Desktop/algososh/src/utils/functions.ts":"24","/Users/daryamakauchyk/Desktop/algososh/src/utils/constants.ts":"25","/Users/daryamakauchyk/Desktop/algososh/src/components/list-page/list-page-class.tsx":"26","/Users/daryamakauchyk/Desktop/algososh/src/components/stack-page/stack-page-class.tsx":"27","/Users/daryamakauchyk/Desktop/algososh/src/components/queue-page/queue-page-class.tsx":"28"},{"size":614,"mtime":1667493838004,"results":"29","hashOfConfig":"30"},{"size":425,"mtime":1667493838005,"results":"31","hashOfConfig":"30"},{"size":1234,"mtime":1667493837999,"results":"32","hashOfConfig":"30"},{"size":3548,"mtime":1668039210399,"results":"33","hashOfConfig":"30"},{"size":11340,"mtime":1668039204054,"results":"34","hashOfConfig":"30"},{"size":2218,"mtime":1668039194342,"results":"35","hashOfConfig":"30"},{"size":2136,"mtime":1667493837999,"results":"36","hashOfConfig":"30"},{"size":2425,"mtime":1668039229213,"results":"37","hashOfConfig":"30"},{"size":6442,"mtime":1668039217361,"results":"38","hashOfConfig":"30"},{"size":2717,"mtime":1668039223508,"results":"39","hashOfConfig":"30"},{"size":1272,"mtime":1667493838001,"results":"40","hashOfConfig":"30"},{"size":603,"mtime":1667493838001,"results":"41","hashOfConfig":"30"},{"size":691,"mtime":1667493838001,"results":"42","hashOfConfig":"30"},{"size":1178,"mtime":1667966898576,"results":"43","hashOfConfig":"30"},{"size":1374,"mtime":1668027075609,"results":"44","hashOfConfig":"30"},{"size":82,"mtime":1667493838005,"results":"45","hashOfConfig":"30"},{"size":707,"mtime":1667493838001,"results":"46","hashOfConfig":"30"},{"size":664,"mtime":1667493838001,"results":"47","hashOfConfig":"30"},{"size":1588,"mtime":1667493838000,"results":"48","hashOfConfig":"30"},{"size":103,"mtime":1667493838005,"results":"49","hashOfConfig":"30"},{"size":606,"mtime":1668024999200,"results":"50","hashOfConfig":"30"},{"size":635,"mtime":1667493838001,"results":"51","hashOfConfig":"30"},{"size":672,"mtime":1667493838001,"results":"52","hashOfConfig":"30"},{"size":1011,"mtime":1668038985740,"results":"53","hashOfConfig":"30"},{"size":124,"mtime":1668023456432,"results":"54","hashOfConfig":"30"},{"size":3034,"mtime":1668038961103,"results":"55","hashOfConfig":"30"},{"size":460,"mtime":1668024052604,"results":"56","hashOfConfig":"30"},{"size":1181,"mtime":1668025703971,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ho7ngv",{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"71"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"71"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","suppressedMessages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},"/Users/daryamakauchyk/Desktop/algososh/src/index.tsx",[],[],"/Users/daryamakauchyk/Desktop/algososh/src/reportWebVitals.ts",[],[],"/Users/daryamakauchyk/Desktop/algososh/src/components/app/app.tsx",[],[],"/Users/daryamakauchyk/Desktop/algososh/src/components/queue-page/queue-page.tsx",["145"],[],"import React, { useState, ChangeEvent } from \"react\";\nimport { TQueueItem } from \"../../types/queue\";\nimport { Queue } from \"./queue-page-class\";\nimport { Input } from \"../ui/input/input\";\nimport { Button } from \"../ui/button/button\";\nimport { Circle } from \"../ui/circle/circle\";\nimport { SolutionLayout } from \"../ui/solution-layout/solution-layout\";\nimport { ElementStates } from \"../../types/element-states\";\nimport { delay } from \"../../utils/functions\";\nimport { DELAY_SHORT } from \"../../utils/constants\";\nimport styles from \"./queue-page.module.css\";\n\nexport const QueuePage: React.FC = () => {\n  const defaultQueue = Array.from({ length: 7 }, () => ({\n    value: \"\",\n    color: ElementStates.Default,\n  }));\n  const [arr, setArr] = useState<TQueueItem[]>(defaultQueue);\n  const [queue, setQueue] = useState(new Queue<TQueueItem>(7));\n  const [inputValue, setInputValue] = useState(\"\");\n  const [buttons, setDisabledButtons] = useState(false);\n\n  const onChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleAddNumber = async () => {\n    if (inputValue) {\n      setInputValue(\"\");\n      queue.enqueue({ value: inputValue, color: ElementStates.Default });\n      setQueue(queue);\n\n      arr[queue.getTail() - 1] = { value: \"\", color: ElementStates.Changing };\n      setArr([...arr]);\n\n      await delay(DELAY_SHORT);\n      arr[queue.getTail() - 1] = { value: inputValue, color: ElementStates.Changing };\n      setArr([...arr]);\n\n      arr[queue.getTail() - 1] = { value: inputValue, color: ElementStates.Default };\n      setArr([...arr]);\n    }\n  };\n\n  const handleDeleteNumber = async () => {\n    setDisabledButtons(true);\n    queue.dequeue();\n    setQueue(queue);\n\n    arr[queue.getHead() - 1] = { value: arr[queue.getHead() - 1].value, color: ElementStates.Changing };\n    setArr([...arr]);\n\n    await delay(DELAY_SHORT);\n    arr[queue.getHead() - 1] = { value: \"\", color: ElementStates.Default };\n    setArr([...arr]);\n\n    if (queue.getHead() === 7 && queue.getTail() === 7 && queue.isEmpty()) {\n      arr[queue.getHead() - 1] = { value: \"\", color: ElementStates.Default, head: \"head\" };\n      setArr([...arr]);\n    }\n\n    setDisabledButtons(false);\n  };\n\n  const handleClearQueue = () => {\n    queue.clear();\n    setQueue(queue);\n    setArr(defaultQueue);\n  };\n\n  return (\n    <SolutionLayout title=\"Очередь\">\n      <div className={styles.container}>\n        <Input\n          maxLength={4}\n          isLimitText={true}\n          type=\"text\"\n          value={inputValue}\n          onChange={onChange}\n        />\n        <Button\n          text=\"Добавить\"\n          onClick={handleAddNumber}\n          disabled={inputValue === \"\" || queue.isFull()}\n        />\n        <Button\n          text=\"Удалить\"\n          onClick={handleDeleteNumber}\n          disabled={!arr.length || queue.isEmpty()}\n        />\n        <Button\n          text=\"Очистить\"\n          onClick={handleClearQueue}\n          disabled={!arr.length || queue.isEmpty()}\n        />\n      </div>\n      <ul className={styles.circles} >\n          {arr && arr.slice(0, 7).map((item, index) =>\n            <li key={index}>\n              <Circle\n                letter={item.value}\n                index={index}\n                state={item.color}\n                head={(index === queue.getHead() && !queue.isEmpty()) || item.head ? 'head' : ''}\n                tail={(index === queue.getTail() - 1 && !queue.isEmpty()) ? 'tail' : ''} />\n            </li>)}\n        </ul>\n    </SolutionLayout>\n  );\n};\n",["146","147"],"/Users/daryamakauchyk/Desktop/algososh/src/components/list-page/list-page.tsx",["148","149","150","151","152"],[],"import React, { useState, ChangeEvent, useMemo, useEffect } from \"react\";\nimport { TListItem } from \"../../types/list\";\nimport { LinkedList } from \"./list-page-class\";\nimport { Input } from \"../ui/input/input\";\nimport { Button } from \"../ui/button/button\";\nimport { Circle } from \"../ui/circle/circle\";\nimport { ArrowIcon } from \"../ui/icons/arrow-icon\";\nimport { SolutionLayout } from \"../ui/solution-layout/solution-layout\";\nimport { ElementStates } from \"../../types/element-states\";\nimport { delay, getRandomNumber } from \"../../utils/functions\";\nimport { DELAY_SHORT } from \"../../utils/constants\";\nimport styles from \"./list-page.module.css\";\n\nexport const ListPage: React.FC = () => {\n  const [inputValue, setInputValue] = useState(\"\");\n  const [indexValue, setIndexValue] = useState(\"\");\n  const [circleValue, setCircleValue] = useState(\"\");\n\n  const list = useMemo(\n    () =>\n      new LinkedList<string>(\n        Array.from({ length: 4 }, () => getRandomNumber(0, 99).toString())\n      ),\n    []\n  );\n\n  const [arr, setArr] = useState<TListItem[]>(\n    list\n      .toArray()\n      .map((item) => ({ value: item, color: ElementStates.Default }))\n  );\n\n  const [addedToHead, setAddedToHead] = useState(false);\n  const [removedFromHead, setRemovedFromHead] = useState(false);\n  const [addedByIndex, setAddedByIndex] = useState(false);\n  const [removedByIndex, setRemovedByIndex] = useState(false);\n  const [addedToTail, setAddedToTail] = useState(false);\n  const [removedFromTail, setRemovedFromTail] = useState(false);\n  const [indexOfInputValue, setIndexOfInputValue] = useState<number>();\n  const [loading, setLoading] = useState(false);\n  const [buttons, setDisabledButtons] = useState(false);\n  const [indexAddButton, setDisabledIndexAddButton] = useState(false);\n  const [indexDeleteButton, setDisabledIndexDeleteButton] = useState(false);\n\n  useEffect(() => {\n    indexValue && inputValue && +indexValue <= list.getSize() - 1\n      ? setDisabledIndexAddButton(false)\n      : setDisabledIndexAddButton(true);\n\n    indexValue && +indexValue <= list.getSize() - 1 || indexValue &&  +indexValue < arr.length - 1\n      ? setDisabledIndexDeleteButton(false)\n      : setDisabledIndexDeleteButton(true);\n\n    list.getSize() >= 10 || !inputValue\n      ? setDisabledButtons(true)\n      : setDisabledButtons(false);\n  });\n\n  const onInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setInputValue(e.target.value);\n  };\n\n  const onIndexChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setIndexValue(e.target.value);\n  };\n\n  const displayTailConditions = !removedFromTail && !removedByIndex && !addedToTail;\n  const displayHeadConditions = !addedToHead && !addedByIndex;\n\n  const displayHead = (index: number) => {\n    if (index === 0 && displayHeadConditions) {\n      return \"head\";\n    }\n    if (circleValue || addedByIndex) {\n      return \"\";\n    }\n  };\n\n  const displayTail = (index: number) => {\n    if (index === arr.length - 1 && displayTailConditions) {\n      return \"tail\";\n    }\n    if (arr.length === 1) {\n      return \"\";\n    }\n    if (removedByIndex && index === arr.length - 1) {\n      return \"\";\n    }\n    return \"\";\n  };\n\n  const handleAddToHead = async () => {\n    if (list.getSize() >= 9) {\n      setDisabledButtons(true);\n    }\n    if (inputValue) {\n      setLoading(true);\n      setIndexOfInputValue(0);\n      setAddedToHead(true);\n\n      await delay(DELAY_SHORT);\n      list.prepend(inputValue);\n      setAddedToHead(false);\n      const newArr = list\n        .toArray()\n        .map((item) => ({ value: item, color: ElementStates.Default }));\n      newArr[0].color = ElementStates.Modified;\n      setArr(newArr);\n\n      await delay(DELAY_SHORT);\n      newArr[0].color = ElementStates.Default;\n      setArr(newArr);\n    }\n    setInputValue(\"\");\n    setLoading(false);\n  };\n\n  const handleAddToTail = async () => {\n    if (list.getSize() >= 9) {\n      setDisabledButtons(true);\n    }\n    if (inputValue) {\n      setLoading(true);\n      setInputValue(inputValue);\n      setIndexOfInputValue(list.getSize() - 1);\n      setAddedToTail(true);\n\n      await delay(DELAY_SHORT);\n      list.append(inputValue);\n      setAddedToTail(false);\n      const newArr = list\n        .toArray()\n        .map((item) => ({ value: item, color: ElementStates.Default }));\n      newArr[newArr.length - 1].color = ElementStates.Modified;\n      setArr(newArr);\n\n      await delay(DELAY_SHORT);\n      newArr[newArr.length - 1].color = ElementStates.Default;\n      setArr(newArr);\n    }\n    setInputValue(\"\");\n    setLoading(false);\n  };\n\n  const handleRemoveFromHead = async () => {\n    if (list.getSize() > 0) {\n      const newArr = list\n        .toArray()\n        .map((item) => ({ value: item, color: ElementStates.Default }));\n      setCircleValue(newArr[0].value);\n      setLoading(true);\n      setRemovedFromHead(true);\n      setIndexOfInputValue(0);\n      newArr[0].value = \"\";\n      setArr(newArr);\n\n      await delay(DELAY_SHORT);\n      list.deleteHead();\n      setRemovedFromHead(false);\n      setArr(\n        list\n          .toArray()\n          .map((item) => ({ value: item, color: ElementStates.Default }))\n      );\n    }\n    setLoading(false);\n  };\n\n  const handleRemoveFromTail = async () => {\n    if (list.getSize() > 0) {\n      const newArr = list.toArray().map((item) => ({ value: item, color: ElementStates.Default }));\n      setCircleValue(newArr[newArr.length - 1].value);\n      setLoading(true);\n      setRemovedFromTail(true);\n      setIndexOfInputValue(newArr.length - 1);\n      newArr[newArr.length - 1].value = \"\";\n      setArr(newArr);\n\n      await delay(DELAY_SHORT);\n      list.deleteTail();\n      setRemovedFromTail(false);\n      setArr(\n        list\n          .toArray()\n          .map((item) => ({ value: item, color: ElementStates.Default }))\n      );\n    }\n    setLoading(false);\n  };\n\n  const handleAddByIndex = async () => {\n    if (list.getSize() >= 9) {\n      setDisabledIndexAddButton(true);\n    }\n    if (+indexValue) {\n      setLoading(true);\n      setAddedByIndex(true);\n      const newArr = list\n        .toArray()\n        .map((item) => ({ value: item, color: ElementStates.Default }));\n      for (let i = 0; i <= +indexValue; i++) {\n        setIndexOfInputValue(i);\n\n        await delay(DELAY_SHORT);\n        if (i < +indexValue) {\n          newArr[i].color = ElementStates.Changing;\n          setArr(newArr);\n        }\n      }\n      setAddedByIndex(false);\n      setIndexOfInputValue(+\"\");\n      list.addByIndex(inputValue, +indexValue);\n      const finalArr = list\n        .toArray()\n        .map((item) => ({ value: item, color: ElementStates.Default }));\n      finalArr[+indexValue].color = ElementStates.Modified;\n\n      setArr(finalArr);\n\n      await delay(DELAY_SHORT);\n      finalArr[+indexValue].color = ElementStates.Default;\n      setArr(finalArr);\n    }\n    setLoading(false);\n    setInputValue(\"\");\n    setIndexValue(\"\");\n  };\n\n  const handleRemoveByIndex = async () => {\n    if (+indexValue < list.getSize()) {\n      setLoading(true);\n      const newArr = list\n        .toArray()\n        .map((item) => ({ value: item, color: ElementStates.Default }));\n      for (let i = 0; i <= +indexValue; i++) {\n        await delay(DELAY_SHORT);\n        newArr[i].color = ElementStates.Changing;\n        setArr([...newArr]);\n      }\n\n      await delay(DELAY_SHORT);\n      setCircleValue(newArr[+indexValue].value);\n      newArr[+indexValue].value = \"\";\n      setRemovedByIndex(true);\n      newArr[+indexValue].color = ElementStates.Default;\n      setIndexOfInputValue(+indexValue);\n\n      await delay(DELAY_SHORT);\n      list.removeByIndex(+indexValue);\n      setArr(\n        list\n          .toArray()\n          .map((item) => ({ value: item, color: ElementStates.Default }))\n      );\n      setRemovedByIndex(false);\n      setLoading(false);\n      setIndexValue(\"\");\n    }\n  };\n\n  return (\n    <SolutionLayout title=\"Связный список\">\n      <div className={styles.container}>\n        <div className={styles.inputcontainer}>\n          <Input\n            placeholder=\"Введите значение\"\n            maxLength={4}\n            isLimitText={true}\n            type=\"text\"\n            value={inputValue}\n            onChange={onInputChange}\n          />\n        </div>\n        <Button\n          extraClass={styles.button}\n          text=\"Добавить в head\"\n          onClick={handleAddToHead}\n          disabled={buttons}\n        />\n        <Button\n          extraClass={styles.button}\n          text=\"Добавить в tail\"\n          onClick={handleAddToTail}\n          disabled={buttons}\n        />\n        <Button\n          extraClass={styles.button}\n          text=\"Удалить из head\"\n          onClick={handleRemoveFromHead}\n          disabled={arr.length <= 1}\n        />\n        <Button\n          extraClass={styles.button}\n          text=\"Удалить из tail\"\n          onClick={handleRemoveFromTail}\n          disabled={arr.length <= 1}\n        />\n      </div>\n      <div className={styles.container}>\n        <div className={styles.inputcontainer}>\n          <Input\n            placeholder=\"Введите индекс\"\n            type=\"text\"\n            value={indexValue}\n            onChange={onIndexChange}\n          />\n        </div>\n        <Button\n          extraClass={styles.indexbutton}\n          text=\"Добавить по индексу\"\n          onClick={handleAddByIndex}\n          disabled={indexAddButton}\n        />\n        <Button\n          extraClass={styles.indexbutton}\n          text=\"Удалить по индексу\"\n          onClick={handleRemoveByIndex}\n          disabled={indexDeleteButton}\n        />\n      </div>\n      <ul className={styles.circles}>\n        {arr &&\n          arr.map((item, index) => (\n            <li key={index} className={styles.circlebox}>\n              {loading === true &&\n                (addedToHead === true ||\n                  addedToTail === true ||\n                  addedByIndex === true) &&\n                index === indexOfInputValue && (\n                  <div className={styles.smalltopcircle}>\n                    <Circle\n                      isSmall\n                      letter={inputValue}\n                      state={ElementStates.Changing}\n                    />\n                  </div>\n                )}\n              {loading === true &&\n                (removedFromTail === true ||\n                  removedFromHead === true ||\n                  removedByIndex === true) &&\n                index === indexOfInputValue && (\n                  <div className={styles.smallbottomcircle}>\n                    <Circle\n                      isSmall\n                      letter={circleValue}\n                      state={ElementStates.Changing}\n                    />\n                  </div>\n                )}\n              <div className={styles.bigcircle}>\n                <Circle\n                  letter={item.value}\n                  state={item.color}\n                  index={index}\n                  head={displayHead(index)}\n                  tail={displayTail(index)}\n                />\n              </div>\n              {index !== arr.length - 1 && (\n                <div className={styles.arrow}>\n                  <ArrowIcon />\n                </div>\n              )}\n            </li>\n          ))}\n      </ul>\n    </SolutionLayout>\n  );\n};\n","/Users/daryamakauchyk/Desktop/algososh/src/components/fibonacci-page/fibonacci-page.tsx",[],[],"/Users/daryamakauchyk/Desktop/algososh/src/components/main-page/main-page.tsx",[],[],"/Users/daryamakauchyk/Desktop/algososh/src/components/string/string.tsx",[],[],"/Users/daryamakauchyk/Desktop/algososh/src/components/sorting-page/sorting-page.tsx",[],[],"/Users/daryamakauchyk/Desktop/algososh/src/components/stack-page/stack-page.tsx",[],[],"/Users/daryamakauchyk/Desktop/algososh/src/components/ui/solution-layout/solution-layout.tsx",[],[],"/Users/daryamakauchyk/Desktop/algososh/src/components/ui/return-button/return-button.tsx",[],[],"/Users/daryamakauchyk/Desktop/algososh/src/components/ui/icons/return-icon.tsx",[],[],"/Users/daryamakauchyk/Desktop/algososh/src/components/ui/input/input.tsx",[],[],"/Users/daryamakauchyk/Desktop/algososh/src/components/ui/button/button.tsx",[],[],"/Users/daryamakauchyk/Desktop/algososh/src/types/direction.ts",[],[],"/Users/daryamakauchyk/Desktop/algososh/src/components/ui/icons/descending-icon.tsx",[],[],"/Users/daryamakauchyk/Desktop/algososh/src/components/ui/icons/ascending-icon.tsx",[],[],"/Users/daryamakauchyk/Desktop/algososh/src/components/ui/circle/circle.tsx",[],[],"/Users/daryamakauchyk/Desktop/algososh/src/types/element-states.ts",[],[],"/Users/daryamakauchyk/Desktop/algososh/src/components/ui/column/column.tsx",[],[],"/Users/daryamakauchyk/Desktop/algososh/src/components/ui/radio-input/radio-input.tsx",[],[],"/Users/daryamakauchyk/Desktop/algososh/src/components/ui/icons/arrow-icon.tsx",[],[],"/Users/daryamakauchyk/Desktop/algososh/src/utils/functions.ts",[],[],"/Users/daryamakauchyk/Desktop/algososh/src/utils/constants.ts",[],[],"/Users/daryamakauchyk/Desktop/algososh/src/components/list-page/list-page-class.tsx",[],[],"/Users/daryamakauchyk/Desktop/algososh/src/components/stack-page/stack-page-class.tsx",[],[],"/Users/daryamakauchyk/Desktop/algososh/src/components/queue-page/queue-page-class.tsx",[],[],{"ruleId":"153","severity":1,"message":"154","line":21,"column":10,"nodeType":"155","messageId":"156","endLine":21,"endColumn":17},{"ruleId":"157","replacedBy":"158"},{"ruleId":"159","replacedBy":"160"},{"ruleId":"161","severity":1,"message":"162","line":45,"column":3,"nodeType":"155","endLine":45,"endColumn":12,"suggestions":"163"},{"ruleId":"164","severity":1,"message":"165","line":50,"column":16,"nodeType":"166","messageId":"167","endLine":50,"endColumn":18},{"ruleId":"164","severity":1,"message":"165","line":50,"column":53,"nodeType":"166","messageId":"167","endLine":50,"endColumn":55},{"ruleId":"164","severity":1,"message":"168","line":50,"column":53,"nodeType":"166","messageId":"167","endLine":50,"endColumn":55},{"ruleId":"164","severity":1,"message":"168","line":50,"column":67,"nodeType":"166","messageId":"167","endLine":50,"endColumn":69},"@typescript-eslint/no-unused-vars","'buttons' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["169"],"no-negated-in-lhs",["170"],"react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setDisabledIndexAddButton'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [indexValue, inputValue, list, arr.length] as a second argument to the useEffect Hook.",["171"],"no-mixed-operators","Unexpected mix of '&&' and '||'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","Unexpected mix of '||' and '&&'. Use parentheses to clarify the intended order of operations.","no-global-assign","no-unsafe-negation",{"desc":"172","fix":"173"},"Add dependencies array: [indexValue, inputValue, list, arr.length]",{"range":"174","text":"175"},[2322,2322],", [indexValue, inputValue, list, arr.length]"]