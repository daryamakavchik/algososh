{"ast":null,"code":"var _jsxFileName = \"/Users/daryamakauchyk/Desktop/algososh/src/components/list-page/list-page.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useMemo } from \"react\";\nimport { Input } from \"../ui/input/input\";\nimport { Button } from \"../ui/button/button\";\nimport styles from \"./list-page.module.css\";\nimport { SolutionLayout } from \"../ui/solution-layout/solution-layout\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class Node {\n  constructor(value, next) {\n    this.value = void 0;\n    this.next = void 0;\n    this.value = value;\n    this.next = next === undefined ? null : next;\n  }\n\n}\nexport class LinkedList {\n  appendArr(values) {\n    values.forEach(value => this.append(value));\n  }\n\n  constructor(els) {\n    this.head = void 0;\n    this.tail = void 0;\n    this.size = void 0;\n    this.head = null;\n    this.tail = null;\n    this.size = 0;\n\n    if (els !== null && els !== void 0 && els.length) {\n      this.appendArr(els);\n    }\n\n    ;\n  }\n\n  get(index) {\n    if (index < 0 || index >= this.size) return null;\n    let counter = 0;\n    let curr = this.head;\n\n    while (counter !== index && curr) {\n      var _curr;\n\n      curr = (_curr = curr) === null || _curr === void 0 ? void 0 : _curr.next;\n      counter++;\n    }\n\n    return curr;\n  }\n\n  getSize() {\n    return this.size;\n  }\n\n  toArray() {\n    let curr = this.head;\n    const res = [];\n\n    while (curr) {\n      res.push(curr.value);\n      curr = curr.next;\n    }\n\n    ;\n    return [...res];\n  }\n\n  append(element) {\n    let node = new Node(element);\n\n    if (this.size === 0) {\n      this.head = node;\n    } else {\n      let current = this.head;\n\n      while (current && current.next !== null) {\n        current = current.next;\n      }\n\n      if (current) current.next = new Node(element);\n    }\n\n    this.size++;\n  } //   prepend(element: T) {\n  //     const newNode = new Node(element);\n  //     if (!this.head || !this.tail) {\n  //       this.head = newNode;\n  //       this.tail = newNode;\n  //       this.size++;\n  //       return this;\n  //     }\n  //     const currenNode = this.head;\n  //     this.head = newNode;\n  //     this.head.next = currenNode;\n  //     this.size++;\n  //   }\n  //   deleteHead() {\n  //     if (!this.head) return null;\n  //     if (this.size === 1) {\n  //       this.head = null;\n  //       this.tail = null;\n  //       this.size = 0;\n  //       return;\n  //     }\n  //     const currentHead = this.head;\n  //     const newHead = currentHead.next;\n  //     this.head = newHead;\n  //     this.size--;\n  //   }\n  //   deleteTail() {\n  //     if (!this.tail) return;\n  //     if (this.size === 1) {\n  //       this.head = null;\n  //       this.tail = null;\n  //       this.size = 0;\n  //       return;\n  //     }\n  //     let current = this.head;\n  //     let newTail = null;\n  //     while (current) {\n  //       if (current.next) {\n  //         newTail = current;\n  //       }\n  //       current = current.next;\n  //     }\n  //     this.tail = newTail;\n  //     this.tail!.next = null;\n  //     this.size--;\n  //   }\n  //   addByIndex(element: T, index: number) {\n  //     if (index < 0 || index > this.size) {\n  //       console.log(\"Enter a valid index\");\n  //       return;\n  //     } else {\n  //       const node = new Node(element);\n  //       if (index === 0) {\n  //         node.next = this.head;\n  //         this.head = node;\n  //         this.size++;\n  //       } else {\n  //         let curr = this.head;\n  //         let currIndex = 0;\n  //         for (let i = 0; i < index - 1; i++) {\n  //           curr = curr!.next;\n  //         }\n  //         node.next = curr!.next;\n  //         curr!.next = node;\n  //         this.size++;\n  //       }\n  //     }\n  //   }\n  //   removeByIndex(index: number) {\n  //     if (index === 0) return this.deleteHead();\n  //     if (index === this.size - 1) return this.deleteTail();\n  //     let prev = this.get(index - 1);\n  //     if (prev?.next) {\n  //       let deletedNode = prev?.next;\n  //       prev.next = deletedNode?.next;\n  //       this.size--;\n  //       return deletedNode;\n  //     }\n  //   }\n  //   getArrWithColor() {\n  //     return this.toArray().map(item => ({ value: item, color: ElementStates.Default }));\n  // };\n\n\n}\nexport const ListPage = () => {\n  _s();\n\n  const [inputValue, setInputValue] = useState(\"\");\n  const [indexValue, setIndexValue] = useState(\"\");\n\n  const getRandomNum = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  };\n\n  const randomnum = getRandomNum(0, 99);\n  const list = useMemo(() => new LinkedList(Array.from({\n    length: 4\n  }, () => randomnum.toString())), []);\n\n  const delay = ms => {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  };\n\n  const onInputChange = e => {\n    setInputValue(e.target.value);\n  };\n\n  const onIndexChange = e => {\n    setIndexValue(e.target.value);\n  };\n\n  const handleAddToHead = async () => {\n    if (inputValue) {\n      setInputValue(\"\");\n      list.append(inputValue);\n    }\n  };\n\n  const handleAddToTail = () => {};\n\n  const handleRemoveFromHead = () => {};\n\n  const handleRemoveFromTail = () => {};\n\n  const handleAddByIndex = () => {};\n\n  const handleRemoveByIndex = () => {};\n\n  const removeElements = (head, val) => {\n    if (head === null) {\n      return null;\n    }\n\n    let dummyHead = new Node(0);\n    dummyHead.next = head;\n    head = dummyHead;\n\n    while (dummyHead.next !== null) {\n      if (dummyHead.next.value === val) {\n        dummyHead.next = dummyHead.next.next;\n      } else {\n        dummyHead = dummyHead.next;\n      }\n    }\n\n    return head.next;\n  };\n\n  return /*#__PURE__*/_jsxDEV(SolutionLayout, {\n    title: \"\\u0421\\u0432\\u044F\\u0437\\u043D\\u044B\\u0439 \\u0441\\u043F\\u0438\\u0441\\u043E\\u043A\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.container,\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        style: {\n          maxWidth: \"204px\"\n        },\n        placeholder: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0437\\u043D\\u0430\\u0447\\u0435\\u043D\\u0438\\u0435\",\n        maxLength: 4,\n        isLimitText: true,\n        type: \"text\",\n        value: inputValue,\n        onChange: onInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        style: {\n          minWidth: \"175px\"\n        },\n        text: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0432 head\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        style: {\n          minWidth: \"175px\"\n        },\n        text: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0432 tail\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        style: {\n          minWidth: \"175px\"\n        },\n        text: \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C \\u0438\\u0437 head\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        style: {\n          minWidth: \"175px\"\n        },\n        text: \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C \\u0438\\u0437 tail\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.container,\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        style: {\n          maxWidth: \"204px\"\n        },\n        placeholder: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0438\\u043D\\u0434\\u0435\\u043A\\u0441\",\n        type: \"text\",\n        value: indexValue,\n        onChange: onIndexChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        style: {\n          minWidth: \"362px\"\n        },\n        text: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u043F\\u043E \\u0438\\u043D\\u0434\\u0435\\u043A\\u0441\\u0443\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        style: {\n          minWidth: \"362px\"\n        },\n        text: \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C \\u043F\\u043E \\u0438\\u043D\\u0434\\u0435\\u043A\\u0441\\u0443\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: styles.circles\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 236,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ListPage, \"Ol/F7joe8lQgzp0WSKv0zdrmTMg=\");\n\n_c = ListPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListPage\");","map":{"version":3,"sources":["/Users/daryamakauchyk/Desktop/algososh/src/components/list-page/list-page.tsx"],"names":["React","useState","useMemo","Input","Button","styles","SolutionLayout","Node","constructor","value","next","undefined","LinkedList","appendArr","values","forEach","append","els","head","tail","size","length","get","index","counter","curr","getSize","toArray","res","push","element","node","current","ListPage","inputValue","setInputValue","indexValue","setIndexValue","getRandomNum","min","max","Math","floor","random","randomnum","list","Array","from","toString","delay","ms","Promise","resolve","setTimeout","onInputChange","e","target","onIndexChange","handleAddToHead","handleAddToTail","handleRemoveFromHead","handleRemoveFromTail","handleAddByIndex","handleRemoveByIndex","removeElements","val","dummyHead","container","maxWidth","minWidth","circles"],"mappings":"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","sourcesContent":["import React, { useState, ChangeEvent, useMemo } from \"react\";\nimport { TListItem, ILinkedList } from \"../../types/list\";\nimport { Input } from \"../ui/input/input\";\nimport { Button } from \"../ui/button/button\";\nimport { Circle } from \"../ui/circle/circle\";\nimport styles from \"./list-page.module.css\";\nimport { ElementStates } from \"../../types/element-states\";\nimport { SolutionLayout } from \"../ui/solution-layout/solution-layout\";\n\nexport class Node<T> {\n  value: T;\n  next: Node<T> | null;\n  constructor(value: T, next?: Node<T> | null) {\n    this.value = value;\n    this.next = next === undefined ? null : next;\n  }\n}\n\nexport class LinkedList<T> implements ILinkedList<T> {\n  private head: Node<T> | null;\n  private tail: Node<T> | null;\n  private size: number;\n  private appendArr(values: T[]) {\n    values.forEach((value) => this.append(value));\n};\n  constructor(els: T[]) {\n    this.head = null;\n    this.tail = null;\n    this.size = 0;\n    if (els?.length) {\n      this.appendArr(els);\n  };\n  }\n\n  get(index: number) {\n    if (index < 0 || index >= this.size) return null;\n    let counter = 0;\n    let curr = this.head;\n    while (counter !== index && curr) {\n      curr = curr?.next;\n      counter++;\n    }\n    return curr;\n  }\n\n  getSize() {\n    return this.size;\n  }\n\n  toArray() {\n    let curr = this.head;\n    const res = [];\n\n    while (curr) {\n        res.push(curr.value);\n        curr = curr.next;\n    };\n    return [...res];\n};\n\n  append(element: T) {\n    let node = new Node(element);\n    if (this.size === 0) {\n      this.head = node;\n    } else {\n      let current = this.head;\n      while (current && current.next !== null) {\n        current = current.next;\n      }\n      if (current) current.next = new Node(element);\n    }\n    this.size++;\n  }\n\n//   prepend(element: T) {\n//     const newNode = new Node(element);\n\n//     if (!this.head || !this.tail) {\n//       this.head = newNode;\n//       this.tail = newNode;\n//       this.size++;\n//       return this;\n//     }\n\n//     const currenNode = this.head;\n//     this.head = newNode;\n//     this.head.next = currenNode;\n//     this.size++;\n//   }\n\n//   deleteHead() {\n//     if (!this.head) return null;\n\n//     if (this.size === 1) {\n//       this.head = null;\n//       this.tail = null;\n//       this.size = 0;\n//       return;\n//     }\n\n//     const currentHead = this.head;\n//     const newHead = currentHead.next;\n//     this.head = newHead;\n//     this.size--;\n//   }\n\n//   deleteTail() {\n//     if (!this.tail) return;\n\n//     if (this.size === 1) {\n//       this.head = null;\n//       this.tail = null;\n//       this.size = 0;\n//       return;\n//     }\n\n//     let current = this.head;\n//     let newTail = null;\n//     while (current) {\n//       if (current.next) {\n//         newTail = current;\n//       }\n//       current = current.next;\n//     }\n//     this.tail = newTail;\n//     this.tail!.next = null;\n//     this.size--;\n//   }\n\n//   addByIndex(element: T, index: number) {\n//     if (index < 0 || index > this.size) {\n//       console.log(\"Enter a valid index\");\n//       return;\n//     } else {\n//       const node = new Node(element);\n\n//       if (index === 0) {\n//         node.next = this.head;\n//         this.head = node;\n//         this.size++;\n//       } else {\n//         let curr = this.head;\n//         let currIndex = 0;\n//         for (let i = 0; i < index - 1; i++) {\n//           curr = curr!.next;\n//         }\n//         node.next = curr!.next;\n//         curr!.next = node;\n//         this.size++;\n//       }\n//     }\n//   }\n\n//   removeByIndex(index: number) {\n//     if (index === 0) return this.deleteHead();\n//     if (index === this.size - 1) return this.deleteTail();\n//     let prev = this.get(index - 1);\n//     if (prev?.next) {\n//       let deletedNode = prev?.next;\n//       prev.next = deletedNode?.next;\n//       this.size--;\n//       return deletedNode;\n//     }\n//   }\n\n//   getArrWithColor() {\n//     return this.toArray().map(item => ({ value: item, color: ElementStates.Default }));\n// };\n}\n\nexport const ListPage: React.FC = () => {\n  const [inputValue, setInputValue] = useState(\"\");\n  const [indexValue, setIndexValue] = useState(\"\");\n\n  const getRandomNum = (min: number, max: number): number => {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  };\n\n  const randomnum = getRandomNum(0, 99);\n  const list = useMemo(() => new LinkedList<string>(Array.from({ length: 4 }, () => (randomnum.toString()))), []);\n\n\n  const delay = (ms: number) => {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  };\n\n  const onInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setInputValue(e.target.value);\n  };\n\n  const onIndexChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setIndexValue(e.target.value);\n  };\n\n  const handleAddToHead = async () => {\n    if (inputValue) {\n      setInputValue(\"\");\n      list.append(inputValue);\n    }\n  };\n\n  const handleAddToTail = () => {};\n\n  const handleRemoveFromHead = () => {};\n\n  const handleRemoveFromTail = () => {};\n\n  const handleAddByIndex = () => {};\n\n  const handleRemoveByIndex = () => {};\n\n  const removeElements = (\n    head: Node<number> | null,\n    val: number\n  ): Node<number> | null => {\n    if (head === null) {\n      return null;\n    }\n\n    let dummyHead = new Node(0);\n    dummyHead.next = head;\n    head = dummyHead;\n\n    while (dummyHead.next !== null) {\n      if (dummyHead.next.value === val) {\n        dummyHead.next = dummyHead.next.next;\n      } else {\n        dummyHead = dummyHead.next;\n      }\n    }\n\n    return head.next;\n  };\n\n  return (\n    <SolutionLayout title=\"Связный список\">\n      <div className={styles.container}>\n        <Input\n          style={{ maxWidth: \"204px\" }}\n          placeholder=\"Введите значение\"\n          maxLength={4}\n          isLimitText={true}\n          type=\"text\"\n          value={inputValue}\n          onChange={onInputChange}\n        />\n        <Button style={{ minWidth: \"175px\" }} text=\"Добавить в head\" />\n        <Button style={{ minWidth: \"175px\" }} text=\"Добавить в tail\" />\n        <Button style={{ minWidth: \"175px\" }} text=\"Удалить из head\" />\n        <Button style={{ minWidth: \"175px\" }} text=\"Удалить из tail\" />\n      </div>\n      <div className={styles.container}>\n        <Input\n          style={{ maxWidth: \"204px\" }}\n          placeholder=\"Введите индекс\"\n          type=\"text\"\n          value={indexValue}\n          onChange={onIndexChange}\n        />\n        <Button style={{ minWidth: \"362px\" }} text=\"Добавить по индексу\" />\n        <Button style={{ minWidth: \"362px\" }} text=\"Удалить по индексу\" />\n      </div>\n      <ul className={styles.circles}>\n        {/* {arr &&\n          arr.map((item, index) => (\n            <li key={index}>\n              <Circle\n                letter={item.value}\n                state={item.color}\n                index={index}\n                head={addIndex(index, arr)}\n              />\n            </li>\n          ))} */}\n      </ul>\n    </SolutionLayout>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}