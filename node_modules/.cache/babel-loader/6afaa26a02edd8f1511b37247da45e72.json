{"ast":null,"code":"import { ElementStates } from \"../types/element-states\";\nexport const delay = ms => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};\nexport const createArr = () => {\n  const arr = [];\n  const length = Math.floor(Math.random() * (17 - 3 + 1)) + 3;\n\n  for (let i = 0; i < length; i++) {\n    arr.push({\n      value: Math.round(Math.random() * 100),\n      color: ElementStates.Default\n    });\n  }\n\n  return arr;\n};\nexport const swap = (arr, firstIndex, secondIndex) => {\n  const temp = arr[firstIndex];\n  arr[firstIndex] = arr[secondIndex];\n  arr[secondIndex] = temp;\n  return arr;\n};\nexport const countFibonacci = n => {\n  let arr = [0, 1];\n\n  for (let i = 2; i < n + 1; i++) {\n    arr.push(arr[i - 2] + arr[i - 1]);\n  }\n\n  return arr;\n};\n\nconst getRandomNumber = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};","map":{"version":3,"sources":["/Users/daryamakauchyk/Desktop/algososh/src/utils/functions.ts"],"names":["ElementStates","delay","ms","Promise","resolve","setTimeout","createArr","arr","length","Math","floor","random","i","push","value","round","color","Default","swap","firstIndex","secondIndex","temp","countFibonacci","n","getRandomNumber","min","max"],"mappings":"AACA,SAASA,aAAT,QAA8B,yBAA9B;AAEA,OAAO,MAAMC,KAAK,GAAIC,EAAD,IAAgB;AACnC,SAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAaC,UAAU,CAACD,OAAD,EAAUF,EAAV,CAAnC,CAAP;AACD,CAFM;AAIP,OAAO,MAAMI,SAAS,GAAG,MAAM;AAC7B,QAAMC,GAAG,GAAG,EAAZ;AACA,QAAMC,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiB,KAAK,CAAL,GAAS,CAA1B,CAAX,IAA2C,CAA1D;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,MAApB,EAA4BI,CAAC,EAA7B,EAAiC;AAC/BL,IAAAA,GAAG,CAACM,IAAJ,CAAS;AACPC,MAAAA,KAAK,EAAEL,IAAI,CAACM,KAAL,CAAWN,IAAI,CAACE,MAAL,KAAgB,GAA3B,CADA;AAEPK,MAAAA,KAAK,EAAEhB,aAAa,CAACiB;AAFd,KAAT;AAID;;AACD,SAAOV,GAAP;AACD,CAVM;AAYP,OAAO,MAAMW,IAAI,GAAG,CAACX,GAAD,EAAgBY,UAAhB,EAAoCC,WAApC,KAA4D;AAC5E,QAAMC,IAAI,GAAGd,GAAG,CAACY,UAAD,CAAhB;AACAZ,EAAAA,GAAG,CAACY,UAAD,CAAH,GAAkBZ,GAAG,CAACa,WAAD,CAArB;AACAb,EAAAA,GAAG,CAACa,WAAD,CAAH,GAAmBC,IAAnB;AACA,SAAOd,GAAP;AACD,CALI;AAOP,OAAO,MAAMe,cAAc,GAAIC,CAAD,IAAyB;AACrD,MAAIhB,GAAa,GAAG,CAAC,CAAD,EAAI,CAAJ,CAApB;;AACA,OAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGW,CAAC,GAAG,CAAxB,EAA2BX,CAAC,EAA5B,EAAgC;AAC9BL,IAAAA,GAAG,CAACM,IAAJ,CAASN,GAAG,CAACK,CAAC,GAAG,CAAL,CAAH,GAAaL,GAAG,CAACK,CAAC,GAAG,CAAL,CAAzB;AACD;;AACD,SAAOL,GAAP;AACD,CANM;;AAQP,MAAMiB,eAAe,GAAG,CAACC,GAAD,EAAcC,GAAd,KAAsC;AAC5D,SAAOjB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBe,GAAG,GAAGD,GAAN,GAAY,CAA7B,CAAX,IAA8CA,GAArD;AACD,CAFD","sourcesContent":["import { TArray } from \"../types/string\";\nimport { ElementStates } from \"../types/element-states\";\n\nexport const delay = (ms: number) => {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n};\n\nexport const createArr = () => {\n  const arr = [];\n  const length = Math.floor(Math.random() * (17 - 3 + 1)) + 3;\n  for (let i = 0; i < length; i++) {\n    arr.push({\n      value: Math.round(Math.random() * 100),\n      color: ElementStates.Default,\n    });\n  }\n  return arr;\n};\n\nexport const swap = (arr: TArray[], firstIndex: number, secondIndex: number) => {\n    const temp = arr[firstIndex];\n    arr[firstIndex] = arr[secondIndex];\n    arr[secondIndex] = temp;\n    return arr;\n  };\n\nexport const countFibonacci = (n: number): number[] => {\n  let arr: number[] = [0, 1];\n  for (let i = 2; i < n + 1; i++) {\n    arr.push(arr[i - 2] + arr[i - 1]);\n  }\n  return arr;\n};\n\nconst getRandomNumber = (min: number, max: number): number => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n"]},"metadata":{},"sourceType":"module"}