{"ast":null,"code":"var _jsxFileName = \"/Users/daryamakauchyk/Desktop/algososh/src/components/fibonacci-page/fibonacci-page.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { SolutionLayout } from \"../ui/solution-layout/solution-layout\";\nimport { Input } from \"../ui/input/input\";\nimport { Button } from \"../ui/button/button\";\nimport { Circle } from \"../ui/circle/circle\";\nimport { delay, countFibonacci } from \"../../utils/functions\";\nimport styles from \"./fibonacci-page.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const FibonacciPage = () => {\n  _s();\n\n  const [inputValue, setInputValue] = useState('');\n  const [inputArr, setInputArr] = useState([]);\n  const [loader, setLoader] = useState(false);\n\n  const onInputChange = e => {\n    setInputValue(e.currentTarget.value);\n  };\n\n  const getFibonacciNumbers = async n => {\n    const arr = countFibonacci(+inputValue);\n    setLoader(true);\n\n    for (let i = 0; i < arr.length; i++) {\n      await delay(500);\n      setInputArr(arr.slice(0, i + 1));\n    }\n\n    setLoader(false);\n  };\n\n  const handleDisplay = () => {\n    getFibonacciNumbers(inputValue);\n  };\n\n  return /*#__PURE__*/_jsxDEV(SolutionLayout, {\n    title: \"\\u041F\\u043E\\u0441\\u043B\\u0435\\u0434\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u044C\\u043D\\u043E\\u0441\\u0442\\u044C \\u0424\\u0438\\u0431\\u043E\\u043D\\u0430\\u0447\\u0447\\u0438\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.container,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.inputcontainer,\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          type: \"number\",\n          value: inputValue,\n          isLimitText: true,\n          max: 19,\n          min: 1,\n          onChange: onInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.button,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            text: \"\\u0420\\u0430\\u0441\\u0441\\u0447\\u0438\\u0442\\u0430\\u0442\\u044C\",\n            isLoader: loader,\n            disabled: inputValue === \"\" ? true : false,\n            onClick: handleDisplay\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: styles.circlecontainer,\n        children: inputArr && inputArr.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(Circle, {\n            index: index,\n            letter: item.toString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FibonacciPage, \"HmgsF/nB7L1TXYXPxi/qJ+bHh2I=\");\n\n_c = FibonacciPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"FibonacciPage\");","map":{"version":3,"sources":["/Users/daryamakauchyk/Desktop/algososh/src/components/fibonacci-page/fibonacci-page.tsx"],"names":["React","useState","SolutionLayout","Input","Button","Circle","delay","countFibonacci","styles","FibonacciPage","inputValue","setInputValue","inputArr","setInputArr","loader","setLoader","onInputChange","e","currentTarget","value","getFibonacciNumbers","n","arr","i","length","slice","handleDisplay","container","inputcontainer","button","circlecontainer","map","item","index","toString"],"mappings":"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","sourcesContent":["import React, { useState, ChangeEvent } from \"react\";\nimport { SolutionLayout } from \"../ui/solution-layout/solution-layout\";\nimport { Input } from \"../ui/input/input\";\nimport { Button } from \"../ui/button/button\";\nimport { Circle } from \"../ui/circle/circle\";\nimport { delay, countFibonacci } from \"../../utils/functions\";\nimport styles from \"./fibonacci-page.module.css\";\n\nexport const FibonacciPage: React.FC = () => {\n  const [inputValue, setInputValue] = useState('');\n  const [inputArr, setInputArr] = useState<Array<number>>([]);\n  const [loader, setLoader] = useState(false);\n\n  const onInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setInputValue(e.currentTarget.value);\n  };\n\n  const getFibonacciNumbers = async (n: string) => {\n    const arr = countFibonacci(+inputValue);\n    setLoader(true);\n    for (let i = 0; i < arr.length; i++) {\n      await delay(500);\n      setInputArr(arr.slice(0, i + 1));\n    }\n    setLoader(false);\n  }\n\n  const handleDisplay = () => {\n    getFibonacciNumbers(inputValue);\n  };\n\n  return (\n    <SolutionLayout title=\"Последовательность Фибоначчи\">\n        <div className={styles.container}>\n        <div className={styles.inputcontainer}>\n          <Input\n            type=\"number\"\n            value={inputValue}\n            isLimitText={true}\n            max={19}\n            min={1}\n            onChange={onInputChange}\n          />\n          <div className={styles.button}>\n            <Button\n              text=\"Рассчитать\"\n              isLoader={loader}\n              disabled={inputValue === \"\" ? true : false}\n              onClick={handleDisplay}\n            />\n          </div>\n        </div>\n        <ul className={styles.circlecontainer}>\n          {inputArr &&\n            inputArr.map((item, index) => (\n              <li key={index}>\n                <Circle index={index} letter={item.toString()} />\n              </li>\n            ))}\n        </ul>\n      </div>\n    </SolutionLayout>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}