{"ast":null,"code":"var _jsxFileName = \"/Users/daryamakauchyk/Desktop/algososh/src/components/string/string.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { SolutionLayout } from \"../ui/solution-layout/solution-layout\";\nimport { Input } from \"../ui/input/input\";\nimport { Button } from \"../ui/button/button\";\nimport { Circle } from \"../ui/circle/circle\";\nimport styles from './string.module.css';\nimport { ElementStates } from \"../../types/element-states\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const StringComponent = () => {\n  _s();\n\n  const [inputValue, setInputValue] = useState('');\n  const [inputArr, setInputArr] = useState([]);\n  const [loader, setLoader] = useState(false);\n\n  const onInputChange = e => {\n    setInputValue(e.currentTarget.value);\n  };\n\n  const swap = (arr, firstIndex, secondIndex) => {\n    const temp = arr[firstIndex];\n    arr[firstIndex] = arr[secondIndex];\n    arr[secondIndex] = temp;\n    return arr;\n  };\n\n  const reverse = async arr => {\n    setLoader(true);\n    const mid = Math.ceil(arr.length / 2);\n\n    for (let i = 0; i < mid; i++) {\n      let j = arr.length - 1 - i;\n\n      if (i !== j) {\n        arr[i].color = ElementStates.Changing;\n        arr[j].color = ElementStates.Changing;\n        setInputArr([...arr]); //await delay(DELAY_IN_MS);\n      }\n\n      ;\n      swap(arr, i, j);\n      arr[i].color = ElementStates.Modified;\n      arr[j].color = ElementStates.Modified;\n      setInputArr([...arr]);\n    }\n\n    setLoader(false);\n  };\n\n  const handleButton = () => {\n    const newArr = inputValue.split('').map(value => ({\n      value,\n      color: ElementStates.Default\n    }));\n    reverse(newArr);\n  };\n\n  return /*#__PURE__*/_jsxDEV(SolutionLayout, {\n    title: \"\\u0421\\u0442\\u0440\\u043E\\u043A\\u0430\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.container,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.input,\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          isLimitText: true,\n          maxLength: 11,\n          value: inputValue,\n          onChange: onInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.button,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            text: \"\\u0420\\u0430\\u0437\\u0432\\u0435\\u0440\\u043D\\u0443\\u0442\\u044C\",\n            onClick: handleButton,\n            isLoader: loader,\n            disabled: inputValue === ''\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: styles.circlesBox,\n        children: inputArr && inputArr.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(Circle, {\n            letter: item.value,\n            state: item.color\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n\n_s(StringComponent, \"HmgsF/nB7L1TXYXPxi/qJ+bHh2I=\");\n\n_c = StringComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"StringComponent\");","map":{"version":3,"sources":["/Users/daryamakauchyk/Desktop/algososh/src/components/string/string.tsx"],"names":["React","useState","SolutionLayout","Input","Button","Circle","styles","ElementStates","StringComponent","inputValue","setInputValue","inputArr","setInputArr","loader","setLoader","onInputChange","e","currentTarget","value","swap","arr","firstIndex","secondIndex","temp","reverse","mid","Math","ceil","length","i","j","color","Changing","Modified","handleButton","newArr","split","map","Default","container","input","button","circlesBox","item","index"],"mappings":"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","sourcesContent":["import React, {useState, ChangeEvent} from \"react\";\nimport { SolutionLayout } from \"../ui/solution-layout/solution-layout\";\nimport { Input } from \"../ui/input/input\";\nimport { Button } from \"../ui/button/button\";\nimport { Circle } from \"../ui/circle/circle\";\nimport styles from './string.module.css';\nimport { TArray } from \"../../types/string\";\nimport { ElementStates } from \"../../types/element-states\";\n\nexport const StringComponent: React.FC = () => {\n\n  const [inputValue, setInputValue] = useState('');\n  const [inputArr, setInputArr] = useState<Array<TArray>>([]);\n  const [loader, setLoader] = useState(false);\n\n  const onInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setInputValue(e.currentTarget.value);\n  };\n\n  const swap = (arr: TArray[], firstIndex: number, secondIndex: number) => {\n    const temp = arr[firstIndex];\n    arr[firstIndex] = arr[secondIndex];\n    arr[secondIndex] = temp;\n    return arr;\n  };\n  \n    const reverse = async (arr: TArray[]) => {\n      setLoader(true);\n      const mid = Math.ceil(arr.length / 2);\n  \n      for (let i = 0; i < mid; i++) {\n        let j = arr.length - 1 - i;\n  \n        if (i !== j) {\n          arr[i].color = ElementStates.Changing;\n          arr[j].color = ElementStates.Changing;\n          setInputArr([...arr]);\n          //await delay(DELAY_IN_MS);\n        };\n  \n        swap(arr, i, j);\n  \n        arr[i].color = ElementStates.Modified;\n        arr[j].color = ElementStates.Modified;\n  \n        setInputArr([...arr]);\n      }\n      setLoader(false);\n    };\n  \n    const handleButton = () => {\n      const newArr = inputValue.split('').map((value => ({ value, color: ElementStates.Default })));\n      reverse(newArr);\n    };\n  \n  \n  return (\n    <SolutionLayout title=\"Строка\">\n        <div className={styles.container}>\n        <div className={styles.input}>\n          <Input\n            isLimitText={true}\n            maxLength={11}\n            value={inputValue}\n            onChange={onInputChange}\n          />\n          <div className={styles.button}>\n            <Button text=\"Развернуть\" onClick={handleButton} isLoader={loader} disabled={inputValue === ''} />\n          </div>\n        </div>\n        <ul className={styles.circlesBox}>\n          {inputArr && inputArr.map((item, index) =>\n            <li key={index}>\n              <Circle letter={item.value} state={item.color} />\n            </li>)}\n        </ul>\n      </div>\n      {/* <div className={styles.container}>\n        <Input isLimitText maxLength={11} onChange={(e) => onInputChange} />\n        <Button text=\"Развернуть\" disabled />\n        {inputState.map(el => {\n          <Circle letter={el} />\n        })}\n      </div> */}\n    </SolutionLayout>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}