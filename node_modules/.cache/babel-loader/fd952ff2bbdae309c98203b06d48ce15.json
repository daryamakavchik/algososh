{"ast":null,"code":"var _jsxFileName = \"/Users/daryamakauchyk/Desktop/algososh/src/components/list-page/list-page.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useMemo } from \"react\";\nimport { Input } from \"../ui/input/input\";\nimport { Button } from \"../ui/button/button\";\nimport { Circle } from \"../ui/circle/circle\";\nimport { ArrowIcon } from \"../ui/icons/arrow-icon\";\nimport styles from \"./list-page.module.css\";\nimport { ElementStates } from \"../../types/element-states\";\nimport { SolutionLayout } from \"../ui/solution-layout/solution-layout\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class Node {\n  constructor(value, next) {\n    this.value = void 0;\n    this.next = void 0;\n    this.value = value;\n    this.next = next === undefined ? null : next;\n  }\n\n}\nexport class LinkedList {\n  addValues(values) {\n    values.forEach(value => this.append(value));\n  }\n\n  constructor(elements) {\n    this.head = void 0;\n    this.tail = void 0;\n    this.size = void 0;\n    this.head = null;\n    this.tail = null;\n    this.size = 0;\n\n    if (elements !== null && elements !== void 0 && elements.length) {\n      this.addValues(elements);\n    }\n  }\n\n  getSize() {\n    return this.size;\n  }\n\n  getCurr(index) {\n    if (index < 0 || index >= this.size) return null;\n    let counter = 0;\n    let curr = this.head;\n\n    while (counter !== index && curr) {\n      var _curr;\n\n      curr = (_curr = curr) === null || _curr === void 0 ? void 0 : _curr.next;\n      counter++;\n    }\n\n    return curr;\n  }\n\n  toArray() {\n    let curr = this.head;\n    const res = [];\n\n    while (curr) {\n      res.push(curr.value);\n      curr = curr.next;\n    }\n\n    return [...res];\n  }\n\n  append(element) {\n    let node = new Node(element);\n\n    if (this.size === 0) {\n      this.head = node;\n    } else {\n      let current = this.head;\n\n      while (current && current.next !== null) {\n        current = current.next;\n      }\n\n      if (current) current.next = new Node(element);\n    }\n\n    this.size++;\n  }\n\n  prepend(element) {\n    const newNode = new Node(element); // if (!this.head || !this.tail) {\n    //   this.head = newNode;\n    //   this.tail = newNode;\n    //   this.size++;\n    //   return this;\n    // }\n\n    const currentNode = this.head;\n    this.head = newNode;\n    this.head.next = currentNode;\n    this.size++;\n  }\n\n  addByIndex(element, index) {\n    const newNode = new Node(element);\n\n    if (index === 0) {\n      newNode.next = this.head;\n      this.head = newNode;\n      this.size++;\n    }\n\n    ;\n    let prev = this.getCurr(index - 1);\n\n    if (prev !== null && prev !== void 0 && prev.next) {\n      let temp = prev === null || prev === void 0 ? void 0 : prev.next;\n      prev.next = newNode;\n      newNode.next = temp;\n      this.size++;\n    }\n\n    ;\n    return;\n  }\n\n}\nexport const ListPage = () => {\n  _s();\n\n  const [inputValue, setInputValue] = useState(\"\");\n  const [indexValue, setIndexValue] = useState(\"\");\n\n  const getRandomNumber = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  };\n\n  const list = useMemo(() => new LinkedList(Array.from({\n    length: 4\n  }, () => getRandomNumber(0, 99).toString())), []);\n  const [arr, setArr] = useState(list.toArray().map(item => ({\n    value: item,\n    color: ElementStates.Default\n  })));\n  const [addedToHead, setAddedToHead] = useState(false);\n  const [removedFromHead, setRemovedFromHead] = useState(false);\n  const [addedByIndex, setAddedByIndex] = useState(false);\n  const [removedByIndex, setRemovedByIndex] = useState(false);\n  const [addedToTail, setAddedToTail] = useState(false);\n  const [removedFromTail, setRemovedFromTail] = useState(false);\n  const [indexOfInputValue, setIndexOfInputValue] = useState();\n  const [loading, setLoading] = useState(false);\n\n  const delay = ms => {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  };\n\n  const onInputChange = e => {\n    setInputValue(e.target.value);\n  };\n\n  const onIndexChange = e => {\n    setIndexValue(e.target.value);\n  };\n\n  const displayHead = index => {\n    if (index === 0 && !addedToHead && !addedByIndex) {\n      return \"head\";\n    } else if (index === 0 && addedByIndex && +indexValue !== 0) {\n      return \"head\";\n    } else {\n      return \"\";\n    }\n  };\n\n  const displayTail = index => {\n    if (index === arr.length - 1 && !removedFromTail && !removedByIndex && !addedToTail) {\n      return \"tail\";\n    } else if (arr.length === 1) {\n      return \"\";\n    } else if (removedByIndex && index === arr.length - 1) {\n      return \"\";\n    } else {\n      return \"\";\n    }\n  };\n\n  const handleAddToHead = async () => {\n    if (inputValue) {\n      setLoading(true);\n      setInputValue(inputValue);\n      setAddedToHead(true);\n      await delay(500);\n      list.prepend(inputValue);\n      setAddedToHead(false);\n      const newArr = list.toArray().map(item => ({\n        value: item,\n        color: ElementStates.Default\n      }));\n      newArr[0].color = ElementStates.Modified;\n      setArr(newArr);\n      await delay(500);\n      newArr[0].color = ElementStates.Default;\n      setArr(newArr);\n    }\n\n    ;\n    setInputValue('');\n    setLoading(false);\n  };\n\n  const handleAddToTail = async () => {\n    if (inputValue) {\n      setLoading(true);\n      setInputValue(inputValue);\n      setIndexOfInputValue(list.getSize() - 1);\n      setAddedToTail(true);\n      await delay(500);\n      list.append(inputValue);\n      setAddedToTail(false);\n      const newArr = list.toArray().map(item => ({\n        value: item,\n        color: ElementStates.Default\n      }));\n      newArr[newArr.length - 1].color = ElementStates.Modified;\n      setArr(newArr);\n      await delay(500);\n      newArr[newArr.length - 1].color = ElementStates.Default;\n      setArr(newArr);\n    }\n\n    ;\n    setInputValue('');\n    setLoading(false);\n  };\n\n  const handleRemoveFromHead = async () => {};\n\n  const handleRemoveFromTail = async () => {};\n\n  const handleAddByIndex = async () => {\n    if (+indexValue < 5 && list.getSize() < 6) {\n      setLoading(true);\n      setAddedByIndex(true);\n      const newArr = list.toArray().map(item => ({\n        value: item,\n        color: ElementStates.Default\n      }));\n\n      for (let i = 0; i <= +indexValue; i++) {\n        setIndexOfInputValue(i);\n        await delay(500);\n\n        if (i < +indexValue) {\n          newArr[i].color = ElementStates.Changing;\n          setArr(newArr);\n        }\n\n        ;\n      }\n\n      ;\n      setAddedByIndex(false);\n      setIndexOfInputValue(+'');\n      list.addByIndex(inputValue, +indexValue);\n      const finalArr = list.toArray().map(item => ({\n        value: item,\n        color: ElementStates.Default\n      }));\n      finalArr[+indexValue].color = ElementStates.Modified;\n      setArr(finalArr);\n      await delay(500);\n      finalArr[+indexValue].color = ElementStates.Default;\n      setArr(finalArr);\n    }\n\n    ;\n    setLoading(false);\n    setInputValue('');\n    setIndexValue('');\n  };\n\n  const handleRemoveByIndex = async () => {};\n\n  const removeElements = (head, val) => {\n    if (head === null) {\n      return null;\n    }\n\n    let dummyHead = new Node(0);\n    dummyHead.next = head;\n    head = dummyHead;\n\n    while (dummyHead.next !== null) {\n      if (dummyHead.next.value === val) {\n        dummyHead.next = dummyHead.next.next;\n      } else {\n        dummyHead = dummyHead.next;\n      }\n    }\n\n    return head.next;\n  };\n\n  return /*#__PURE__*/_jsxDEV(SolutionLayout, {\n    title: \"\\u0421\\u0432\\u044F\\u0437\\u043D\\u044B\\u0439 \\u0441\\u043F\\u0438\\u0441\\u043E\\u043A\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.container,\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        style: {\n          maxWidth: \"204px\"\n        },\n        placeholder: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0437\\u043D\\u0430\\u0447\\u0435\\u043D\\u0438\\u0435\",\n        maxLength: 4,\n        isLimitText: true,\n        type: \"text\",\n        value: inputValue,\n        onChange: onInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        style: {\n          minWidth: \"175px\"\n        },\n        text: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0432 head\",\n        onClick: handleAddToHead\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        style: {\n          minWidth: \"175px\"\n        },\n        text: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0432 tail\",\n        onClick: handleAddToTail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        style: {\n          minWidth: \"175px\"\n        },\n        text: \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C \\u0438\\u0437 head\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        style: {\n          minWidth: \"175px\"\n        },\n        text: \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C \\u0438\\u0437 tail\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.container,\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        style: {\n          maxWidth: \"204px\"\n        },\n        placeholder: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0438\\u043D\\u0434\\u0435\\u043A\\u0441\",\n        type: \"text\",\n        value: indexValue,\n        onChange: onIndexChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        style: {\n          minWidth: \"362px\"\n        },\n        text: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u043F\\u043E \\u0438\\u043D\\u0434\\u0435\\u043A\\u0441\\u0443\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        style: {\n          minWidth: \"362px\"\n        },\n        text: \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C \\u043F\\u043E \\u0438\\u043D\\u0434\\u0435\\u043A\\u0441\\u0443\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: styles.circles,\n      children: arr && arr.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: styles.circlebox,\n        children: [loading === true && addedToHead === true && index === indexOfInputValue && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.smalltopcircle,\n          children: /*#__PURE__*/_jsxDEV(Circle, {\n            isSmall: true,\n            letter: inputValue,\n            state: ElementStates.Changing\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 17\n        }, this), loading === true && addedToTail === true && index === indexOfInputValue && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.smallbottomcircle,\n          children: /*#__PURE__*/_jsxDEV(Circle, {\n            isSmall: true,\n            letter: inputValue,\n            state: ElementStates.Changing\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.bigcircle,\n          children: /*#__PURE__*/_jsxDEV(Circle, {\n            letter: item.value,\n            state: item.color,\n            index: index,\n            head: displayHead(index),\n            tail: displayTail(index)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 17\n        }, this), index !== arr.length - 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.arrow,\n          children: /*#__PURE__*/_jsxDEV(ArrowIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 17\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 264,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ListPage, \"9nxvyx6PQHNtQmzCDdGCSY4F6og=\");\n\n_c = ListPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListPage\");","map":{"version":3,"sources":["/Users/daryamakauchyk/Desktop/algososh/src/components/list-page/list-page.tsx"],"names":["React","useState","useMemo","Input","Button","Circle","ArrowIcon","styles","ElementStates","SolutionLayout","Node","constructor","value","next","undefined","LinkedList","addValues","values","forEach","append","elements","head","tail","size","length","getSize","getCurr","index","counter","curr","toArray","res","push","element","node","current","prepend","newNode","currentNode","addByIndex","prev","temp","ListPage","inputValue","setInputValue","indexValue","setIndexValue","getRandomNumber","min","max","Math","floor","random","list","Array","from","toString","arr","setArr","map","item","color","Default","addedToHead","setAddedToHead","removedFromHead","setRemovedFromHead","addedByIndex","setAddedByIndex","removedByIndex","setRemovedByIndex","addedToTail","setAddedToTail","removedFromTail","setRemovedFromTail","indexOfInputValue","setIndexOfInputValue","loading","setLoading","delay","ms","Promise","resolve","setTimeout","onInputChange","e","target","onIndexChange","displayHead","displayTail","handleAddToHead","newArr","Modified","handleAddToTail","handleRemoveFromHead","handleRemoveFromTail","handleAddByIndex","i","Changing","finalArr","handleRemoveByIndex","removeElements","val","dummyHead","container","maxWidth","minWidth","circles","circlebox","smalltopcircle","smallbottomcircle","bigcircle","arrow"],"mappings":"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","sourcesContent":["import React, { useState, ChangeEvent, useMemo } from \"react\";\nimport { TListItem, ILinkedList } from \"../../types/list\";\nimport { Input } from \"../ui/input/input\";\nimport { Button } from \"../ui/button/button\";\nimport { Circle } from \"../ui/circle/circle\";\nimport { ArrowIcon } from \"../ui/icons/arrow-icon\";\nimport styles from \"./list-page.module.css\";\nimport { ElementStates } from \"../../types/element-states\";\nimport { SolutionLayout } from \"../ui/solution-layout/solution-layout\";\n\nexport class Node<T> {\n  value: T;\n  next: Node<T> | null;\n  constructor(value: T, next?: Node<T> | null) {\n    this.value = value;\n    this.next = next === undefined ? null : next;\n  }\n}\n\nexport class LinkedList<T> implements ILinkedList<T> {\n  private head: Node<T> | null;\n  private tail: Node<T> | null;\n  private size: number;\n  private addValues(values: T[]) { values.forEach((value) => this.append(value))}\n  constructor(elements: T[]) {\n    this.head = null;\n    this.tail = null;\n    this.size = 0;\n    if (elements?.length) { this.addValues(elements) }\n  }\n\n  getSize() { return this.size }\n\n  getCurr(index: number) {\n    if (index < 0 || index >= this.size) return null;\n    let counter = 0;\n    let curr = this.head;\n    while (counter !== index && curr) {\n        curr = curr?.next;\n        counter++\n    }\n    return curr;\n}\n  toArray() {\n    let curr = this.head;\n    const res = [];\n\n    while (curr) {\n      res.push(curr.value);\n      curr = curr.next;\n    }\n    return [...res];\n  }\n\n  append(element: T) {\n    let node = new Node(element);\n    if (this.size === 0) {\n      this.head = node;\n    } else {\n      let current = this.head;\n      while (current && current.next !== null) {\n        current = current.next;\n      }\n      if (current) current.next = new Node(element);\n    }\n    this.size++;\n  }\n\n  prepend(element: T) {\n    const newNode = new Node(element);\n\n    // if (!this.head || !this.tail) {\n    //   this.head = newNode;\n    //   this.tail = newNode;\n    //   this.size++;\n    //   return this;\n    // }\n\n    const currentNode = this.head;\n    this.head = newNode;\n    this.head.next = currentNode;\n    this.size++;\n  }\n\n  addByIndex(element: T, index: number) {\n    const newNode = new Node(element)\n\n    if (index === 0) {\n        newNode.next = this.head;\n        this.head = newNode;\n        this.size++\n    };\n\n    let prev = this.getCurr(index - 1);\n    if (prev?.next) {\n        let temp = prev?.next;\n        prev!.next = newNode;\n        newNode!.next = temp;\n        this.size++\n    };\n    return\n};\n\n}\n\nexport const ListPage: React.FC = () => {\n  const [inputValue, setInputValue] = useState(\"\");\n  const [indexValue, setIndexValue] = useState(\"\");\n\n  const getRandomNumber = (min: number, max: number): number => {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  };\n\n  const list = useMemo(\n    () =>\n      new LinkedList<string>(\n        Array.from({ length: 4 }, () => getRandomNumber(0, 99).toString())\n      ),\n    []\n  );\n\n  const [arr, setArr] = useState<TListItem[]>( \n    list.toArray().map((item) => ({ value: item, color: ElementStates.Default }))\n  );\n  const [addedToHead, setAddedToHead] = useState(false);\n  const [removedFromHead, setRemovedFromHead] = useState(false);\n  const [addedByIndex, setAddedByIndex] = useState(false);\n  const [removedByIndex, setRemovedByIndex] = useState(false);\n  const [addedToTail, setAddedToTail] = useState(false);\n  const [removedFromTail, setRemovedFromTail] = useState(false);\n  const [indexOfInputValue, setIndexOfInputValue] = useState<number>();\n  const [loading, setLoading] = useState(false);\n\n  const delay = (ms: number) => {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  };\n\n  const onInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setInputValue(e.target.value);\n  };\n\n  const onIndexChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setIndexValue(e.target.value);\n  };\n\n  const displayHead = (index: number) => {\n    if (index === 0 && !addedToHead && !addedByIndex) {\n      return \"head\";\n    } else if (index === 0 && addedByIndex && +indexValue !== 0) {\n      return \"head\";\n    } else {\n      return \"\";\n    }\n  };\n\n  const displayTail = (index: number) => {\n    if (index === arr.length - 1 && !removedFromTail && !removedByIndex && !addedToTail) {\n      return \"tail\";\n    } else if (arr.length === 1) {\n      return \"\";\n    } else if (removedByIndex && index === arr.length - 1) {\n      return \"\";\n    } else {\n      return \"\";\n    }\n  };\n\n  const handleAddToHead = async () => {\n    if (inputValue) {\n      setLoading(true);\n      setInputValue(inputValue);\n      setAddedToHead(true);\n      await delay(500);\n      list.prepend(inputValue);\n      setAddedToHead(false);\n      const newArr = list.toArray().map((item) => ({ value: item, color: ElementStates.Default }));\n      newArr[0].color = ElementStates.Modified;\n      setArr(newArr);\n      await delay(500);\n      newArr[0].color = ElementStates.Default;\n      setArr(newArr);\n    };\n    setInputValue('');\n    setLoading(false);\n  };\n\n\n  const handleAddToTail = async () => {\n    if (inputValue) {\n      setLoading(true);\n      setInputValue(inputValue);\n      setIndexOfInputValue((list.getSize()) - 1);\n      setAddedToTail(true);\n      await delay(500);\n      list.append(inputValue);\n      setAddedToTail(false);\n      const newArr = list.toArray().map((item) => ({ value: item, color: ElementStates.Default }));\n      newArr[newArr.length - 1].color = ElementStates.Modified;\n      setArr(newArr);\n      await delay(500);\n      newArr[newArr.length - 1].color = ElementStates.Default;\n      setArr(newArr);\n    };\n    setInputValue('');\n    setLoading(false);\n  };\n\n  const handleRemoveFromHead = async () => {};\n\n  const handleRemoveFromTail = async () => {};\n\n  const handleAddByIndex = async () => {\n      if (+indexValue < 5 && (list.getSize()) < 6) {\n        setLoading(true);\n        setAddedByIndex(true);\n        const newArr = list.toArray().map((item) => ({ value: item, color: ElementStates.Default }));\n        for (let i = 0; i <= +indexValue; i++) {\n          setIndexOfInputValue(i);\n          await delay(500);\n          if (i < +indexValue) {\n            newArr[i].color = ElementStates.Changing;\n            setArr(newArr);\n          };\n        };\n        setAddedByIndex(false);\n        setIndexOfInputValue(+'');\n        list.addByIndex(inputValue, +indexValue);\n        const finalArr = list.toArray().map((item) => ({ value: item, color: ElementStates.Default }));\n        finalArr[+indexValue].color = ElementStates.Modified;\n  \n        setArr(finalArr);\n        await delay(500);\n        finalArr[+indexValue].color = ElementStates.Default;\n        setArr(finalArr);\n      };\n      setLoading(false);\n      setInputValue('');\n      setIndexValue('');\n    };\n\n  const handleRemoveByIndex = async () => {};\n\n  const removeElements = ( head: Node<number> | null, val: number): Node<number> | null => {\n    if (head === null) {\n      return null;\n    }\n\n    let dummyHead = new Node(0);\n    dummyHead.next = head;\n    head = dummyHead;\n\n    while (dummyHead.next !== null) {\n      if (dummyHead.next.value === val) {\n        dummyHead.next = dummyHead.next.next;\n      } else {\n        dummyHead = dummyHead.next;\n      }\n    }\n\n    return head.next;\n  };\n\n  return (\n    <SolutionLayout title=\"Связный список\">\n      <div className={styles.container}>\n        <Input\n          style={{ maxWidth: \"204px\" }}\n          placeholder=\"Введите значение\"\n          maxLength={4}\n          isLimitText={true}\n          type=\"text\"\n          value={inputValue}\n          onChange={onInputChange}\n        />\n        <Button style={{ minWidth: \"175px\" }} text=\"Добавить в head\" onClick={handleAddToHead} />\n        <Button style={{ minWidth: \"175px\" }} text=\"Добавить в tail\" onClick={handleAddToTail} />\n        <Button style={{ minWidth: \"175px\" }} text=\"Удалить из head\" />\n        <Button style={{ minWidth: \"175px\" }} text=\"Удалить из tail\" />\n      </div>\n      <div className={styles.container}>\n        <Input\n          style={{ maxWidth: \"204px\" }}\n          placeholder=\"Введите индекс\"\n          type=\"text\"\n          value={indexValue}\n          onChange={onIndexChange}\n        />\n        <Button style={{ minWidth: \"362px\" }} text=\"Добавить по индексу\" />\n        <Button style={{ minWidth: \"362px\" }} text=\"Удалить по индексу\" />\n      </div>\n      <ul className={styles.circles}>\n        {arr &&\n          arr.map((item, index) => (\n            <li key={index} className={styles.circlebox}>\n            {loading === true && (addedToHead === true && index === indexOfInputValue) &&\n                <div className={styles.smalltopcircle}>\n                  <Circle isSmall letter={inputValue} state={ElementStates.Changing} />\n                </div>}\n                {loading === true && (addedToTail === true && index === indexOfInputValue) &&\n                <div className={styles.smallbottomcircle}>\n                  <Circle isSmall letter={inputValue} state={ElementStates.Changing} />\n                </div>}\n                <div className={styles.bigcircle}>\n              <Circle\n                letter={item.value}\n                state={item.color}\n                index={index}\n                head={displayHead(index)}\n                tail={displayTail(index)}\n              />\n              </div>\n              {index !== arr.length - 1 && (\n                <div className={styles.arrow}>\n                  <ArrowIcon />\n                </div>\n              )}\n            </li>\n          ))}\n      </ul>\n    </SolutionLayout>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}